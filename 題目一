import timeit
import matplotlib.pyplot as plt
from timeit import default_timer as timer

# Top-down approach (divide and conquer / pure recursive)
def fibonacci_top_down(n, memo={}):
    if n <= 1:
        return n
    elif n not in memo:
        memo[n] = fibonacci_top_down(n-1, memo) + fibonacci_top_down(n-2, memo)
    return memo[n]

# Bottom-up approach (dynamic programming-like)
def fibonacci_bottom_up(n):
    fib = [0] * (n+1)
    fib[1] = 1
    for i in range(2, n+1):
        fib[i] = fib[i-1] + fib[i-2]
    return fib[n]

# Measure execution time for F(1) to F(100) using top-down approach
execution_times_top_down = []
max_n_top_down = 0
for n in range(1, 101):
    start_time = timer()
    result = fibonacci_top_down(n)
    end_time = timer()
    execution_time = (end_time - start_time) * 1000  # Convert to milliseconds
    execution_times_top_down.append(execution_time)
    print(f"F({n}) Top-down approach execution time: {execution_time:.6f} ms")
    if execution_time > 0:
        max_n_top_down = n

    if execution_time > 43200 * 1000:  # 12 hours in milliseconds
        break

# Measure execution time for F(1) to F(100) using bottom-up approach
execution_times_bottom_up = []
max_n_bottom_up = 0
for n in range(1, 101):
    start_time = timer()
    result = fibonacci_bottom_up(n)
    end_time = timer()
    execution_time = (end_time - start_time) * 1000  # Convert to milliseconds
    execution_times_bottom_up.append(execution_time)
    print(f"F({n}) Bottom-up approach execution time: {execution_time:.6f} ms")
    if execution_time > 0:
        max_n_bottom_up = n

    if execution_time > 43200 * 1000:  # 12 hours in milliseconds
        break

# Plot the results
plt.plot(range(1, len(execution_times_top_down) + 1), execution_times_top_down, label='Top-down')
plt.plot(range(1, len(execution_times_bottom_up) + 1), execution_times_bottom_up, label='Bottom-up')
plt.xlabel('n')
plt.ylabel('Execution Time (ms)')
plt.title('Execution Time of Fibonacci Calculation')
plt.legend()
plt.show()

print(f"Max value of n for top-down approach: {max_n_top_down}")
print(f"Max value of n for bottom-up approach: {max_n_bottom_up}")
